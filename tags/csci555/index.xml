<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csci555 on xymeow&#39;s blog</title>
    <link>http://xymeow.github.io/tags/csci555/</link>
    <description>Recent content in Csci555 on xymeow&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://xymeow.github.io/tags/csci555/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Singularity System - my note</title>
      <link>http://xymeow.github.io/post/singularity/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://xymeow.github.io/post/singularity/</guid>
      <description>Safe Programming Language what is PL safety  semantic precision for every statement undefinedness -&amp;gt; security compremised the language ensures a statement is only excuted whtn it makes sense, or signals some error(ex throwing an exception)  memory safety  programs can only access mem locarions that they are allowed to access may be compremised by:  pointer arithmetic unconstrained casting lack of in-built array bounds checks lack of in-guilt checks for null pointers programmer-controlled de-allocation (free malloc in C), it may cause use-after-free/double-free bugs -&amp;gt; we can use GC to solve these problems  programs never read uninitialised memory a memory safery language never result in segment faults  type safety  type soundness(strong typing) -&amp;gt; never result in type errors  Singularity System Singularity is a small experimental OS built by Microsoft Research designed with modern software engineering practices and tools.</description>
    </item>
    
    <item>
      <title>CSCI 555 (MIT 6.828) Lab 1 记录</title>
      <link>http://xymeow.github.io/post/cs555-lab1/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://xymeow.github.io/post/cs555-lab1/</guid>
      <description>&lt;p&gt;这学期选了cs555 Advanced Operating System, 据说这课load比较大, 但对于头铁又放飞gpa的我来说根本就无所畏惧(笑). 教授是个大佬,每节课带着读一篇system方向的经典paper,讲的挺好. 然后实验是搬运的mit 6.828, 网上资源很多,感觉工作量会比较大,这学期秃头预定😂&lt;/p&gt;

&lt;p&gt;这系列我觉得我是不会弃坑的(真香警告)&amp;hellip;
这里就记录一下码代码的大致心得以及我觉得重点的地方吧,抄答案还是另寻别处吧,以下正文&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>